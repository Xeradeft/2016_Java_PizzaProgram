/*
 * Mitchell Van Braeckel
 * 02/11/2015
 * Online Order Form for Pizza = Mario & Luigi's Pizza Parlour
    * User can order a pizza online - choose size, toppings & display payment for them to have ready for the delivery guy Lakitu -> Mario theme style

    ->      start-up explanatory msg
    ->      rnd size preselected for user when program starts

    -> tooltips on almost everything - contain small, Mario-themed jokes
    -> picture, title, exit btn, txt area display, reset btn, confirm order btn
    -> lbl of sizes     -> rdo btns - pers, sm, m, l , xl
    -> lbl of toppings  -> 15 toppings check boxes
    -> combo box of specialty pizza preset orders for toppings

    ->      NEVER DID   -> btn sequence of confirm, method of pay (credit, cash, debit), submit   -> also back & reset
    ->      NEVER DID   -> number pad to enter info for paying

    ->      goodbye msg for exit btn

    ->      NEVER DID   -> find out how to shortcut key link btns
                        -> find out how to title the window-like part of the jFrame

    ->      NEVER DID   -> Cool themed photoshop logo pic & title pic w/ 2 mini logo pics (created by me)
                        -> add from internet cool Mario-themed fonts

    -> individual strings & variables for each toppings, pizza, etc.
 */

package pizzaassignment;

/**
 *
 * @author mivan3346
 */

// imports
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import java.util.Random;

public class framePizzaAss extends javax.swing.JFrame {

    /**
     * Creates new form framePizzaAss
     */
    
    // generates rnd #s
    Random r = new Random();
    int rndNum = r.nextInt(5) + 1;
    
    // declare formats - money
    DecimalFormat mf = new DecimalFormat("$#,###,##0.00");
    DecimalFormat pf = new DecimalFormat("##0%");
    
    // declare needed variables
    
            //strings
    String receipt = "";
    
    String sPizza = "";
        //strings per pizza size
    String pizzaPers = "Pizza Size:\tPersonal";
    String pizzaSmall = "Pizza Size:\tSmall";
    String pizzaMed = "Pizza Size:\tMedium";
    String pizzaLarge = "Pizza Size:\tLarge";
    String pizzaXLarge = "Pizza Size:\tExtra Large";
    
        //toppings
    String pepperoni = "";
    String sausage = "";
    String bacon = "";
    String ham = "";
    String beef = "";
    
    String gPep = "";
    String rPep = "";
    String onion = "";
    String bOliv = "";
    String chicken = "";
    
    String jalapeno = "";
    String mush = "";
    String pineapple = "";
    String stuffed = "";
    String xCheese = "";
    
            //doubles
    double subtotal = 0;
    final double TAX = 0.13;
    double taxAmt = 0;
    double total = 0;
    final double TIPRATE = 0.15;
    double tip = 0;
    
    double costPizza = 0;
    //pizza costs per size
    double costPers = 3;
    double costSmall = 5;
    double costMed = 8;
    double costLarge = 10;
    double costXLarge = 12;
    
    double tTop = 0;
    //toppings costs per size
    double pTop = 0.25;
    double sTop = 0.50;
    double mTop = 0.75;
    double lTop = 1.00;
    double xlTop = 1.25;
    
    public framePizzaAss() {
        initComponents();
        
        // greeting msg
        JOptionPane.showMessageDialog(null, "Welcome to Mario & Luigi's Starpowered Pizzeria." + 
                "\nHere you can create and order your very own pizza or choose from some of our favourite recipés." + 
                "\nRegardless of your order, our widely renown Lakitu the Delivery Guy will be happy to serve you." + 
                "\nEnjoy the tooltips of the order form." + "\n[NOTE TO TEACHER]\nI was never able to complete the payment method and number " + 
                "pad input systems and sequences, so they're just disabled (includes the Back button).",
                "Mario & Luigi's Starpowered Pizzeria", JOptionPane.INFORMATION_MESSAGE);
        
        // initialize which pizza size starts program with
        if(rndNum == 1) {
            rdoPers.setSelected(true);
        } else if(rndNum == 2) {
            rdoSmall.setSelected(true);
        } else if(rndNum == 3) {
            rdoMed.setSelected(true);
        } else if(rndNum == 4) {
            rdoLarge.setSelected(true);
        } else {
            rdoXLarge.setSelected(true);
        } // end if
    } // end frame intialization

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrSize = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblPic1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtADisplay = new javax.swing.JTextArea();
        lblSize = new javax.swing.JLabel();
        rdoPers = new javax.swing.JRadioButton();
        rdoSmall = new javax.swing.JRadioButton();
        rdoMed = new javax.swing.JRadioButton();
        rdoLarge = new javax.swing.JRadioButton();
        lblToppings = new javax.swing.JLabel();
        cbPepperoni = new javax.swing.JCheckBox();
        cbSausage = new javax.swing.JCheckBox();
        cbBacon = new javax.swing.JCheckBox();
        cbHam = new javax.swing.JCheckBox();
        cbGPep = new javax.swing.JCheckBox();
        cbRPep = new javax.swing.JCheckBox();
        cbOnion = new javax.swing.JCheckBox();
        cbBOliv = new javax.swing.JCheckBox();
        cbJalapeno = new javax.swing.JCheckBox();
        cbMush = new javax.swing.JCheckBox();
        cbPineapple = new javax.swing.JCheckBox();
        cbStuffed = new javax.swing.JCheckBox();
        rdoXLarge = new javax.swing.JRadioButton();
        cbBeef = new javax.swing.JCheckBox();
        cbChicken = new javax.swing.JCheckBox();
        cbXCheese = new javax.swing.JCheckBox();
        btnExit = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        lblPayMeth = new javax.swing.JLabel();
        btnCredit = new javax.swing.JButton();
        btnCash = new javax.swing.JButton();
        lblDebit = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblNumPad = new javax.swing.JLabel();
        cboPresets = new javax.swing.JComboBox();
        lblTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(200, 200, 0, 0));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblPic1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPic1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPic1.setIcon(new javax.swing.ImageIcon("E:\\Mario-luigi-star.png")); // NOI18N
        lblPic1.setToolTipText("This is where a supposedly masterpiece of photoshop logos goes here after I create it, but I never had time :(");

        txtADisplay.setColumns(20);
        txtADisplay.setRows(5);
        txtADisplay.setToolTipText("");
        txtADisplay.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtADisplay.setEnabled(false);
        txtADisplay.setPreferredSize(new java.awt.Dimension(100, 400));
        jScrollPane1.setViewportView(txtADisplay);

        lblSize.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblSize.setText("Select a Size:");

        btnGrSize.add(rdoPers);
        rdoPers.setText("Personal");
        rdoPers.setToolTipText("Pizza Cost: $3.00 || 25¢ / topping");
        rdoPers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoPersActionPerformed(evt);
            }
        });

        btnGrSize.add(rdoSmall);
        rdoSmall.setText("Small");
        rdoSmall.setToolTipText("Pizza Cost: $5.00 || 50¢ / topping");
        rdoSmall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSmallActionPerformed(evt);
            }
        });

        btnGrSize.add(rdoMed);
        rdoMed.setText("Medium");
        rdoMed.setToolTipText("Pizza Cost: $8.00 || 75¢ / topping");
        rdoMed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoMedActionPerformed(evt);
            }
        });

        btnGrSize.add(rdoLarge);
        rdoLarge.setText("Large");
        rdoLarge.setToolTipText("Pizza Cost: $10.00 || $1.00 / topping");
        rdoLarge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoLargeActionPerformed(evt);
            }
        });

        lblToppings.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblToppings.setText("Choose Your Toppings");

        cbPepperoni.setText("Pepperoni");
        cbPepperoni.setToolTipText("We use only the finest pepperoni that cooks nicely, but doesn't leave the pizza overloaded with puddles of grease due to our superior cooking techniques achieved using our signature Flower-Power Fireballs.");
        cbPepperoni.setEnabled(false);
        cbPepperoni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPepperoniActionPerformed(evt);
            }
        });

        cbSausage.setText("Italian Sausage");
        cbSausage.setToolTipText("This is actually just the same prime meat used for our pepperoni slice except with a little something extra to spice it up and give it some intense flavour.");
        cbSausage.setEnabled(false);
        cbSausage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSausageActionPerformed(evt);
            }
        });

        cbBacon.setText("Bacon Crumble");
        cbBacon.setToolTipText("Bacon goes with EVERYTHING! Seriously, try it!");
        cbBacon.setEnabled(false);
        cbBacon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBaconActionPerformed(evt);
            }
        });

        cbHam.setText("Ham");
        cbHam.setToolTipText("The most delectable slabs of meat cut straight from only the rarest and most valuable enemies -- Trade Secret ;)");
        cbHam.setEnabled(false);
        cbHam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbHamActionPerformed(evt);
            }
        });

        cbGPep.setText("Green Peppers");
        cbGPep.setToolTipText("Deep green like Luigi's cap, these are fresh everyday from Daisy's Garden.");
        cbGPep.setEnabled(false);
        cbGPep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbGPepActionPerformed(evt);
            }
        });

        cbRPep.setText("Red Peppers");
        cbRPep.setToolTipText("Fiery red like Mario's cap, these are fresh everyday from Peach's Garden.");
        cbRPep.setEnabled(false);
        cbRPep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRPepActionPerformed(evt);
            }
        });

        cbOnion.setText("Onions");
        cbOnion.setToolTipText("The sweetest onions you can find in this galaxy, courtesy of our good friend, Captain Toad.");
        cbOnion.setEnabled(false);
        cbOnion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOnionActionPerformed(evt);
            }
        });

        cbBOliv.setText("Black Olives");
        cbBOliv.setToolTipText("Nothing special about these, they're just normal black olives raised by wild Bullet Bills.");
        cbBOliv.setEnabled(false);
        cbBOliv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBOlivActionPerformed(evt);
            }
        });

        cbJalapeno.setText("Jalapeño Peppers");
        cbJalapeno.setToolTipText("The very same Jalapeños that were used to make the Legendary Superspicy Curry.");
        cbJalapeno.setEnabled(false);
        cbJalapeno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbJalapenoActionPerformed(evt);
            }
        });

        cbMush.setText("Mushrooms");
        cbMush.setToolTipText("Delicous, fresh mushrooms harvested daily from our very own Goomba Farm just outside the Castle.");
        cbMush.setEnabled(false);
        cbMush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMushActionPerformed(evt);
            }
        });

        cbPineapple.setText("Pineapple");
        cbPineapple.setToolTipText("The highest quality of exotic juicy fruits imported from the far reached of Cheep-Cheep Island.");
        cbPineapple.setEnabled(false);
        cbPineapple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPineappleActionPerformed(evt);
            }
        });

        cbStuffed.setText("Stuffed Crust");
        cbStuffed.setToolTipText("What is there to say? The crust is jam-packed full of cheese! [$3.00 extra -- Only possible for L or XL pizza]");
        cbStuffed.setEnabled(false);
        cbStuffed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbStuffedActionPerformed(evt);
            }
        });

        btnGrSize.add(rdoXLarge);
        rdoXLarge.setText("Extra Large");
        rdoXLarge.setToolTipText("Pizza Cost: $12.00 || $1.25 / topping");
        rdoXLarge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoXLargeActionPerformed(evt);
            }
        });

        cbBeef.setText("Ground Beef");
        cbBeef.setToolTipText("Made by grinding down a variety of Koopa bodies to make the most exiquisite ground beef you've ever tasted.");
        cbBeef.setEnabled(false);
        cbBeef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBeefActionPerformed(evt);
            }
        });

        cbChicken.setText("Chicken");
        cbChicken.setToolTipText("The most delecate and tender chicken meat we have in stock, surprisingly made from the meat of baby Bloopers.");
        cbChicken.setEnabled(false);
        cbChicken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbChickenActionPerformed(evt);
            }
        });

        cbXCheese.setText("Extra Cheese");
        cbXCheese.setToolTipText("cheese... Cheese... CHEESE! More is never enough!");
        cbXCheese.setEnabled(false);
        cbXCheese.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbXCheeseActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.setToolTipText("Thank you for staying loyal to Mario & Luigi's Starpowered Pizzeria!");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.setToolTipText("Made a mistake? No problem -- just Click Here");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnConfirm.setText("Confirm Order");
        btnConfirm.setToolTipText("Finally made up your mind?");
        btnConfirm.setEnabled(false);
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        lblPayMeth.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPayMeth.setText("Select Your Method of Payment");
        lblPayMeth.setEnabled(false);

        btnCredit.setText("Credit");
        btnCredit.setEnabled(false);

        btnCash.setText("Cash");
        btnCash.setEnabled(false);

        lblDebit.setText("Debit");
        lblDebit.setEnabled(false);

        btnBack.setText("Back");
        btnBack.setEnabled(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblNumPad.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblNumPad.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNumPad.setText("Number Pad");
        lblNumPad.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblNumPad.setEnabled(false);

        cboPresets.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Custom", "Hawaiian", "Canadian", "Meat Lover's", "Super Supreme", "Deluxe", "Random" }));
        cboPresets.setToolTipText("Choose from some of our favourite recipés OR have a blast creating your own!");
        cboPresets.setEnabled(false);
        cboPresets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboPresetsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBack)
                                .addGap(18, 18, 18)
                                .addComponent(btnExit)
                                .addContainerGap())
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(lblPayMeth)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPic1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblSize)
                                .addContainerGap())
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(rdoPers)
                                                    .addComponent(rdoSmall)
                                                    .addComponent(rdoMed)
                                                    .addComponent(rdoLarge)
                                                    .addComponent(rdoXLarge))
                                                .addGap(51, 51, 51)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cbPepperoni)
                                                    .addComponent(cbSausage)
                                                    .addComponent(cbBacon)
                                                    .addComponent(cbHam)
                                                    .addComponent(cbBeef)))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnConfirm)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnReset)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(cbGPep)
                                                            .addComponent(cbBOliv)
                                                            .addComponent(cbOnion)
                                                            .addComponent(cbRPep)
                                                            .addComponent(cbChicken))
                                                        .addGap(30, 30, 30)
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(cbJalapeno)
                                                            .addComponent(cbMush)
                                                            .addComponent(cbPineapple)
                                                            .addComponent(cbStuffed)
                                                            .addComponent(cbXCheese)))
                                                    .addComponent(lblToppings)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cboPresets, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(25, 25, 25))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDebit)
                                            .addComponent(btnCash)
                                            .addComponent(btnCredit))
                                        .addGap(55, 55, 55)
                                        .addComponent(lblNumPad, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSize)
                            .addComponent(lblToppings))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoPers)
                            .addComponent(cbPepperoni)
                            .addComponent(cbGPep)
                            .addComponent(cbJalapeno))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoSmall)
                            .addComponent(cbSausage)
                            .addComponent(cbRPep)
                            .addComponent(cbMush))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoMed)
                            .addComponent(cbBacon)
                            .addComponent(cbOnion)
                            .addComponent(cbPineapple))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoLarge)
                            .addComponent(cbHam)
                            .addComponent(cbBOliv)
                            .addComponent(cbStuffed))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoXLarge)
                            .addComponent(cbBeef)
                            .addComponent(cbChicken)
                            .addComponent(cbXCheese))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnConfirm)
                            .addComponent(btnReset)
                            .addComponent(cboPresets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblPic1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPayMeth)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnCredit)
                                .addGap(49, 49, 49)
                                .addComponent(btnCash)
                                .addGap(49, 49, 49)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnExit)
                                    .addComponent(btnBack)
                                    .addComponent(lblDebit)))
                            .addComponent(lblNumPad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        lblTitle.setFont(new java.awt.Font("Zorque", 0, 46)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 51, 255));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Mario & Luigi's Starpowered Pizzeria");
        lblTitle.setToolTipText("This was also supposed to be like the picture but a mini logo on both sides of the title version :(");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdoPersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoPersActionPerformed
        // set cost of pizza, its string, & cost per topping
        costPizza = costPers;
        sPizza = pizzaPers + "\t" + mf.format(costPizza) + "\n----------------------------------------------------";
        tTop = 0;
        
        // enables confirm order btn
        btnConfirm.setEnabled(true);
        
        // enables cbo box - & sets to Custom
        cboPresets.setEnabled(true);
        cboPresets.setSelectedItem("Custom");
        
        // enable all cb boxes
        cbPepperoni.setEnabled(true);
        cbSausage.setEnabled(true);
        cbBacon.setEnabled(true);
        cbHam.setEnabled(true);
        cbBeef.setEnabled(true);
        cbGPep.setEnabled(true);
        cbRPep.setEnabled(true);
        cbOnion.setEnabled(true);
        cbBOliv.setEnabled(true);
        cbChicken.setEnabled(true);
        cbJalapeno.setEnabled(true);
        cbMush.setEnabled(true);
        cbPineapple.setEnabled(true);
        cbStuffed.setEnabled(false); // not for this size
        cbXCheese.setEnabled(true);
        
        // reset all cb boxes
        cbPepperoni.setSelected(false);
        cbSausage.setSelected(false);
        cbBacon.setSelected(false);
        cbHam.setSelected(false);
        cbBeef.setSelected(false);
        cbGPep.setSelected(false);
        cbRPep.setSelected(false);
        cbOnion.setSelected(false);
        cbBOliv.setSelected(false);
        cbChicken.setSelected(false);
        cbJalapeno.setSelected(false);
        cbMush.setSelected(false);
        cbPineapple.setSelected(false);
        cbStuffed.setSelected(false);
        cbXCheese.setSelected(false);
        
        // reset all toppings
        pepperoni = "";
        sausage = "";
        bacon = "";
        ham = "";
        beef = "";
        gPep = "";
        rPep = "";
        onion = "";
        bOliv = "";
        chicken = "";
        jalapeno = "";
        mush = "";
        pineapple = "";
        stuffed = "";
        xCheese = "";
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_rdoPersActionPerformed

    private void rdoSmallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSmallActionPerformed
        // set cost of pizza, its string, & cost per topping
        costPizza = costSmall;
        sPizza = pizzaSmall + "\t" + mf.format(costPizza) + "\n----------------------------------------------------";
        tTop = 0;
        
        // enables confirm order btn
        btnConfirm.setEnabled(true);
        
        // enables cbo box - & sets to Custom
        cboPresets.setEnabled(true);
        cboPresets.setSelectedItem("Custom");
        
        // enable all cb boxes
        cbPepperoni.setEnabled(true);
        cbSausage.setEnabled(true);
        cbBacon.setEnabled(true);
        cbHam.setEnabled(true);
        cbBeef.setEnabled(true);
        cbGPep.setEnabled(true);
        cbRPep.setEnabled(true);
        cbOnion.setEnabled(true);
        cbBOliv.setEnabled(true);
        cbChicken.setEnabled(true);
        cbJalapeno.setEnabled(true);
        cbMush.setEnabled(true);
        cbPineapple.setEnabled(true);
        cbStuffed.setEnabled(false); // not for this size
        cbXCheese.setEnabled(true);
        
        // reset all cb boxes
        cbPepperoni.setSelected(false);
        cbSausage.setSelected(false);
        cbBacon.setSelected(false);
        cbHam.setSelected(false);
        cbBeef.setSelected(false);
        cbGPep.setSelected(false);
        cbRPep.setSelected(false);
        cbOnion.setSelected(false);
        cbBOliv.setSelected(false);
        cbChicken.setSelected(false);
        cbJalapeno.setSelected(false);
        cbMush.setSelected(false);
        cbPineapple.setSelected(false);
        cbStuffed.setSelected(false);
        cbXCheese.setSelected(false);
        
        // reset all toppings
        pepperoni = "";
        sausage = "";
        bacon = "";
        ham = "";
        beef = "";
        gPep = "";
        rPep = "";
        onion = "";
        bOliv = "";
        chicken = "";
        jalapeno = "";
        mush = "";
        pineapple = "";
        stuffed = "";
        xCheese = "";
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_rdoSmallActionPerformed

    private void rdoMedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoMedActionPerformed
        // set cost of pizza, its string, & cost per topping
        costPizza = costMed;
        sPizza = pizzaMed + "\t" + mf.format(costPizza) + "\n----------------------------------------------------";
        tTop = 0;
        
        // enables confirm order btn
        btnConfirm.setEnabled(true);
        
        // enables cbo box - & sets to Custom
        cboPresets.setEnabled(true);
        cboPresets.setSelectedItem("Custom");
        
        // enable all cb boxes
        cbPepperoni.setEnabled(true);
        cbSausage.setEnabled(true);
        cbBacon.setEnabled(true);
        cbHam.setEnabled(true);
        cbBeef.setEnabled(true);
        cbGPep.setEnabled(true);
        cbRPep.setEnabled(true);
        cbOnion.setEnabled(true);
        cbBOliv.setEnabled(true);
        cbChicken.setEnabled(true);
        cbJalapeno.setEnabled(true);
        cbMush.setEnabled(true);
        cbPineapple.setEnabled(true);
        cbStuffed.setEnabled(false); // not for this size
        cbXCheese.setEnabled(true);
        
        // reset all cb boxes
        cbPepperoni.setSelected(false);
        cbSausage.setSelected(false);
        cbBacon.setSelected(false);
        cbHam.setSelected(false);
        cbBeef.setSelected(false);
        cbGPep.setSelected(false);
        cbRPep.setSelected(false);
        cbOnion.setSelected(false);
        cbBOliv.setSelected(false);
        cbChicken.setSelected(false);
        cbJalapeno.setSelected(false);
        cbMush.setSelected(false);
        cbPineapple.setSelected(false);
        cbStuffed.setSelected(false);
        cbXCheese.setSelected(false);
        
        // reset all toppings
        pepperoni = "";
        sausage = "";
        bacon = "";
        ham = "";
        beef = "";
        gPep = "";
        rPep = "";
        onion = "";
        bOliv = "";
        chicken = "";
        jalapeno = "";
        mush = "";
        pineapple = "";
        stuffed = "";
        xCheese = "";
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_rdoMedActionPerformed

    private void rdoLargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoLargeActionPerformed
        // set cost of pizza, its string, & cost per topping
        costPizza = costLarge;
        sPizza = pizzaLarge + "\t" + mf.format(costPizza) + "\n----------------------------------------------------";
        tTop = 0;
        
        // enables confirm order btn
        btnConfirm.setEnabled(true);
        
        // enables cbo box - & sets to Custom
        cboPresets.setEnabled(true);
        cboPresets.setSelectedItem("Custom");
        
        // enable all cb boxes
        cbPepperoni.setEnabled(true);
        cbSausage.setEnabled(true);
        cbBacon.setEnabled(true);
        cbHam.setEnabled(true);
        cbBeef.setEnabled(true);
        cbGPep.setEnabled(true);
        cbRPep.setEnabled(true);
        cbOnion.setEnabled(true);
        cbBOliv.setEnabled(true);
        cbChicken.setEnabled(true);
        cbJalapeno.setEnabled(true);
        cbMush.setEnabled(true);
        cbPineapple.setEnabled(true);
        cbStuffed.setEnabled(true);
        cbXCheese.setEnabled(true);
        
        // reset all cb boxes
        cbPepperoni.setSelected(false);
        cbSausage.setSelected(false);
        cbBacon.setSelected(false);
        cbHam.setSelected(false);
        cbBeef.setSelected(false);
        cbGPep.setSelected(false);
        cbRPep.setSelected(false);
        cbOnion.setSelected(false);
        cbBOliv.setSelected(false);
        cbChicken.setSelected(false);
        cbJalapeno.setSelected(false);
        cbMush.setSelected(false);
        cbPineapple.setSelected(false);
        cbStuffed.setSelected(false);
        cbXCheese.setSelected(false);
        
        // reset all toppings
        pepperoni = "";
        sausage = "";
        bacon = "";
        ham = "";
        beef = "";
        gPep = "";
        rPep = "";
        onion = "";
        bOliv = "";
        chicken = "";
        jalapeno = "";
        mush = "";
        pineapple = "";
        stuffed = "";
        xCheese = "";
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_rdoLargeActionPerformed

    private void rdoXLargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoXLargeActionPerformed
        // set cost of pizza, its string, & cost per topping
        costPizza = costXLarge;
        sPizza = pizzaXLarge + "\t" + mf.format(costPizza) + "\n----------------------------------------------------";
        tTop = 0;
        
        // enables confirm order btn
        btnConfirm.setEnabled(true);
        
        // enables cbo box - & sets to Custom
        cboPresets.setEnabled(true);
        cboPresets.setSelectedItem("Custom");
        
        // enable all cb boxes
        cbPepperoni.setEnabled(true);
        cbSausage.setEnabled(true);
        cbBacon.setEnabled(true);
        cbHam.setEnabled(true);
        cbBeef.setEnabled(true);
        cbGPep.setEnabled(true);
        cbRPep.setEnabled(true);
        cbOnion.setEnabled(true);
        cbBOliv.setEnabled(true);
        cbChicken.setEnabled(true);
        cbJalapeno.setEnabled(true);
        cbMush.setEnabled(true);
        cbPineapple.setEnabled(true);
        cbStuffed.setEnabled(true);
        cbXCheese.setEnabled(true);
        
        // reset all cb boxes
        cbPepperoni.setSelected(false);
        cbSausage.setSelected(false);
        cbBacon.setSelected(false);
        cbHam.setSelected(false);
        cbBeef.setSelected(false);
        cbGPep.setSelected(false);
        cbRPep.setSelected(false);
        cbOnion.setSelected(false);
        cbBOliv.setSelected(false);
        cbChicken.setSelected(false);
        cbJalapeno.setSelected(false);
        cbMush.setSelected(false);
        cbPineapple.setSelected(false);
        cbStuffed.setSelected(false);
        cbXCheese.setSelected(false);
        
        // reset all toppings
        pepperoni = "";
        sausage = "";
        bacon = "";
        ham = "";
        beef = "";
        gPep = "";
        rPep = "";
        onion = "";
        bOliv = "";
        chicken = "";
        jalapeno = "";
        mush = "";
        pineapple = "";
        stuffed = "";
        xCheese = "";
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_rdoXLargeActionPerformed

    private void cbSausageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSausageActionPerformed
        // check if cb box is selected
        if(cbSausage.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                sausage = "\nItalian Sausage:\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                sausage = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                sausage = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                sausage = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                sausage = "";
                tTop -= lTop;
            } else {
                sausage = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbSausageActionPerformed

    private void cbPepperoniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPepperoniActionPerformed
        // check if cb box is selected
        if(cbPepperoni.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                pepperoni = "\nPepperoni:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                pepperoni = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                pepperoni = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                pepperoni = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                pepperoni = "";
                tTop -= lTop;
            } else {
                pepperoni = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbPepperoniActionPerformed

    private void cbBaconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBaconActionPerformed
        // check if cb box is selected
        if(cbBacon.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                bacon = "\nBacon Crumble:\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                bacon = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                bacon = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                bacon = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                bacon = "";
                tTop -= lTop;
            } else {
                bacon = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbBaconActionPerformed

    private void cbHamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbHamActionPerformed
        // check if cb box is selected
        if(cbHam.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                ham = "\nHam:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                ham = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                ham = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                ham = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                ham = "";
                tTop -= lTop;
            } else {
                ham = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbHamActionPerformed

    private void cbBeefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBeefActionPerformed
        // check if cb box is selected
        if(cbBeef.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                beef = "\nGround Beef:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                beef = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                beef = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                beef = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                beef = "";
                tTop -= lTop;
            } else {
                beef = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbBeefActionPerformed

    private void cbGPepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbGPepActionPerformed
        // check if cb box is selected
        if(cbGPep.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                gPep = "\nGreen Peppers:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                gPep = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                gPep = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                gPep = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                gPep = "";
                tTop -= lTop;
            } else {
                gPep = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbGPepActionPerformed

    private void cbRPepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRPepActionPerformed
        // check if cb box is selected
        if(cbRPep.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                rPep = "\nRed Peppers:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                rPep = "\nRed Peppers:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                rPep = "\nRed Peppers:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                rPep = "\nRed Peppers:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                rPep = "\nRed Peppers:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                rPep = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                rPep = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                rPep = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                rPep = "";
                tTop -= lTop;
            } else {
                rPep = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\tv" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbRPepActionPerformed

    private void cbOnionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOnionActionPerformed
        // check if cb box is selected
        if(cbOnion.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                onion = "\nOnions:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                onion = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                onion = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                onion = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                onion = "";
                tTop -= lTop;
            } else {
                onion = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbOnionActionPerformed

    private void cbBOlivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBOlivActionPerformed
        // check if cb box is selected
        if(cbBOliv.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                bOliv = "\nBlack Olives:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                bOliv = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                bOliv = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                bOliv = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                bOliv = "";
                tTop -= lTop;
            } else {
                bOliv = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbBOlivActionPerformed

    private void cbChickenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbChickenActionPerformed
        // check if cb box is selected
        if(cbChicken.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                chicken = "\nChicken:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                chicken = "\nChicken:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                chicken = "\nChicken:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                chicken = "\nChicken:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                chicken = "\nChicken:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                chicken = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                chicken = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                chicken = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                chicken = "";
                tTop -= lTop;
            } else {
                chicken = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbChickenActionPerformed

    private void cbJalapenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbJalapenoActionPerformed
        // check if cb box is selected
        if(cbJalapeno.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                jalapeno = "\nJalapeño Peppers:\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                jalapeno = "\nJalapeño Peppers:\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                jalapeno = "\nJalapeño Peppers:\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                jalapeno = "\nJalapeño Peppers:\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                jalapeno = "\nJalapeño Peppers:\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                jalapeno = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                jalapeno = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                jalapeno = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                jalapeno = "";
                tTop -= lTop;
            } else {
                jalapeno = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbJalapenoActionPerformed

    private void cbMushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMushActionPerformed
        // check if cb box is selected
        if(cbMush.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                mush = "\nMushrooms:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                mush = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                mush = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                mush = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                mush = "";
                tTop -= lTop;
            } else {
                mush = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbMushActionPerformed

    private void cbPineappleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPineappleActionPerformed
        // check if cb box is selected
        if(cbPineapple.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                pineapple = "\nPineapple:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                pineapple = "\nPineapple:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                pineapple = "\nPineapple:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                pineapple = "\nPineapple:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                pineapple = "\nPineapple:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                pineapple = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                pineapple = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                pineapple = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                pineapple = "";
                tTop -= lTop;
            } else {
                pineapple = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbPineappleActionPerformed

    private void cbStuffedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbStuffedActionPerformed
        // check if cb box is selected
        if(cbStuffed.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoLarge.isSelected() == true) {
                stuffed = "\nStuffed Crust:\t\t" + mf.format(3);
                tTop += 3;
            } else {
                stuffed = "\nStuffed Crust:\t\t" + mf.format(3);
                tTop += 3;
            } //endif
        } else {
            stuffed = "";
            tTop -= 3;
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbStuffedActionPerformed

    private void cbXCheeseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbXCheeseActionPerformed
        // check if cb box is selected
        if(cbXCheese.isSelected() == true) {
            // check which size is selected
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
        } else {
            // reset above
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                xCheese = "";
                tTop -= pTop;
            } else if(rdoSmall.isSelected() == true) {
                xCheese = "";
                tTop -= sTop;
            } else if(rdoMed.isSelected() == true) {
                xCheese = "";
                tTop -= mTop;
            } else if(rdoLarge.isSelected() == true) {
                xCheese = "";
                tTop -= lTop;
            } else {
                xCheese = "";
                tTop -= xlTop;
            } //endif
        } // end if
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt
        receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);
        
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_cbXCheeseActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // goodbye msg
        JOptionPane.showMessageDialog(null, "Thank you for staying loyal to Mario & Luigi's Starpowered Pizza." + 
                "\nPlease come again! And have a great day!", "Mario & Luigi's Starpowered Pizzeria", JOptionPane.INFORMATION_MESSAGE);
        // exits the program
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // resets everything !!!!
        
            // deselects all rdo btns
        rdoPers.setSelected(false);
        rdoSmall.setSelected(false);
        rdoMed.setSelected(false);
        rdoLarge.setSelected(false);
        rdoXLarge.setSelected(false);
            // resets cost of pizza, its string, & cost per topping
        costPizza = 0;
        sPizza = "";
        tTop = 0;
            // disables confirm order btn
        btnConfirm.setEnabled(false);
            // disables cbo box - & resets to custom
        cboPresets.setEnabled(false);
        cboPresets.setSelectedItem("Custom");
            // disable all cb boxes
        cbPepperoni.setEnabled(false);
        cbSausage.setEnabled(false);
        cbBacon.setEnabled(false);
        cbHam.setEnabled(false);
        cbBeef.setEnabled(false);
        cbGPep.setEnabled(false);
        cbRPep.setEnabled(false);
        cbOnion.setEnabled(false);
        cbBOliv.setEnabled(false);
        cbChicken.setEnabled(false);
        cbJalapeno.setEnabled(false);
        cbMush.setEnabled(false);
        cbPineapple.setEnabled(false);
        cbStuffed.setEnabled(false);
        cbXCheese.setEnabled(false);
            // reset all cb boxes
        cbPepperoni.setSelected(false);
        cbSausage.setSelected(false);
        cbBacon.setSelected(false);
        cbHam.setSelected(false);
        cbBeef.setSelected(false);
        cbGPep.setSelected(false);
        cbRPep.setSelected(false);
        cbOnion.setSelected(false);
        cbBOliv.setSelected(false);
        cbChicken.setSelected(false);
        cbJalapeno.setSelected(false);
        cbMush.setSelected(false);
        cbPineapple.setSelected(false);
        cbStuffed.setSelected(false);
        cbXCheese.setSelected(false);
            // reset all toppings
        pepperoni = "";
        sausage = "";
        bacon = "";
        ham = "";
        beef = "";
        gPep = "";
        rPep = "";
        onion = "";
        bOliv = "";
        chicken = "";
        jalapeno = "";
        mush = "";
        pineapple = "";
        stuffed = "";
        xCheese = "";
        
        // calc subtotal
        subtotal = costPizza + tTop;
        
        // output receipt - BLANK               -> just make it blank so everything here isn't needed
        /*receipt = sPizza + 
                pepperoni + sausage + bacon + ham + beef + 
                gPep + rPep + onion + bOliv + chicken + 
                jalapeno + mush + pineapple + stuffed + xCheese + 
                
                "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                "\nSubtotal:\t\t" + mf.format(subtotal);*/
        
        txtADisplay.setText("");
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        // confirms the order of pizza
            // disables all rdo btns
        rdoPers.setEnabled(false);
        rdoSmall.setEnabled(false);
        rdoMed.setEnabled(false);
        rdoLarge.setEnabled(false);
        rdoXLarge.setEnabled(false);
            // disables reset btn & itself
        btnReset.setEnabled(false);
        btnConfirm.setEnabled(false);
            // disables cbo box
        cboPresets.setEnabled(false);
            // disable all cb boxes
        cbPepperoni.setEnabled(false);
        cbSausage.setEnabled(false);
        cbBacon.setEnabled(false);
        cbHam.setEnabled(false);
        cbBeef.setEnabled(false);
        cbGPep.setEnabled(false);
        cbRPep.setEnabled(false);
        cbOnion.setEnabled(false);
        cbBOliv.setEnabled(false);
        cbChicken.setEnabled(false);
        cbJalapeno.setEnabled(false);
        cbMush.setEnabled(false);
        cbPineapple.setEnabled(false);
        cbStuffed.setEnabled(false);
        cbXCheese.setEnabled(false);
        
        // calc tax and total
        taxAmt = TAX * subtotal;
        total = subtotal + taxAmt;
        
        // declare variables for discount
        double discount = 0;
        double discountAmt = 0;
        // ask user question for rnd discount 10 -> 50 %
        String input = JOptionPane.showInputDialog("Answer the question below to get a discount on your order" + 
                "\nWhat was name of the first game Mario ever appeared in?", "Mario & Luigi's Starpowered Pizzeria - Want a Discount?").toLowerCase();
        if(input.equals("donkey kong")) {
            // get discount
            discount = r.nextInt(41) + 10;
            discount = discount * 0.01;
            discountAmt = discount * total;
            // recalc total
            total -= discountAmt;
            // calc tip
            tip = TIPRATE * total;
            total += tip;
            
            // output receipt + tax & total
            receipt = sPizza + 
                    pepperoni + sausage + bacon + ham + beef + 
                    gPep + rPep + onion + bOliv + chicken + 
                    jalapeno + mush + pineapple + stuffed + xCheese + 

                    "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                    "\nSubtotal:\t\t" + mf.format(subtotal) + 

                    "\n----------------------------------------------------\nAmount of Tax:\t\t" + mf.format(taxAmt) + 
                    "\nDiscount (" + pf.format(discount) + "):\t" + mf.format(discountAmt) + 
                    "\nTip for Lakitu the Delivery Guy:\t" + mf.format(tip) + 
                    "\nTotal Cost:\t\t" + mf.format(total);
        } else {
            // no discount
            // calc tip
            tip = TIPRATE * total;
            total += tip;
            // output receipt + tax & total
            receipt = sPizza + 
                    pepperoni + sausage + bacon + ham + beef + 
                    gPep + rPep + onion + bOliv + chicken + 
                    jalapeno + mush + pineapple + stuffed + xCheese + 

                    "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                    "\nSubtotal:\t\t" + mf.format(subtotal) + 

                    "\n----------------------------------------------------\nAmount of Tax:\t\t" + mf.format(taxAmt) + 
                    "\nTip for Lakitu the Delivery Guy:\t" + mf.format(tip) + 
                    "\nTotal Cost:\t\t" + mf.format(total);
        } // end if
        
        // display msg correct answer & info about it
        JOptionPane.showMessageDialog(null, "The correct answer is: 'Donkey Kong'" + 
                "\nIt was an arcade game released by Nintendo in 1981." + 
                "\nIt is an early example of the platform game genre, as the gameplay focuses on " + 
                "\nmaneuvering the main character across a series of platforms while dodging and jumping over obstacles." + 
                "\nThe game sets place in Brooklyn, New York of the 1930s, during the Great Depression era," + 
                "\nwhere Mario (originally named Mr. Video but then changed to \"Jumpman\")" + 
                "\nmust rescue a damsel in distress named Pauline (originally named Lady)," + 
                "\nfrom a giant ape named Donkey Kong in the construction building." + 
                "\nThe hero and ape later became two of Nintendo's most popular and recognizable characters." + 
                "\nDonkey Kong is one of the most important titles from the Golden Age of Video Arcade Games," + 
                "\nand is one of the most popular arcade games of all time.",
                "Mario & Luigi's Starpowered Pizzeria -- About DK & Mario", JOptionPane.INFORMATION_MESSAGE);
        
        // display info in text area
        txtADisplay.setText(receipt);
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void cboPresetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboPresetsActionPerformed
        // checks which preset item is selected
        if(cboPresets.getSelectedItem() == "Custom") {
            /*// resets toppings cost
            tTop = 0;
            // reset all toppings
            pepperoni = "";
            sausage = "";
            bacon = "";
            ham = "";
            beef = "";
            gPep = "";
            rPep = "";
            onion = "";
            bOliv = "";
            chicken = "";
            jalapeno = "";
            mush = "";
            pineapple = "";
            stuffed = "";
            xCheese = "";*/ // nvm this isn't needed
            // enables all cb boxes
            cbPepperoni.setEnabled(true);
            cbSausage.setEnabled(true);
            cbBacon.setEnabled(true);
            cbHam.setEnabled(true);
            cbBeef.setEnabled(true);
            cbGPep.setEnabled(true);
            cbRPep.setEnabled(true);
            cbOnion.setEnabled(true);
            cbBOliv.setEnabled(true);
            cbChicken.setEnabled(true);
            cbJalapeno.setEnabled(true);
            cbMush.setEnabled(true);
            cbPineapple.setEnabled(true);
            // checks the pizza size
            if(rdoLarge.isSelected() == true || rdoXLarge.isSelected() == true) {
                cbStuffed.setEnabled(true);
            } else {
                cbStuffed.setEnabled(false);
            }
            cbXCheese.setEnabled(true);
            
            // calc subtotal
            subtotal = costPizza + tTop;

            // output receipt
            receipt = sPizza + 
                    pepperoni + sausage + bacon + ham + beef + 
                    gPep + rPep + onion + bOliv + chicken + 
                    jalapeno + mush + pineapple + stuffed + xCheese + 

                    "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                    "\nSubtotal:\t\t" + mf.format(subtotal);

            txtADisplay.setText(receipt);
            
        } else if(cboPresets.getSelectedItem() == "Hawaiian") {
                // resets toppings cost
            tTop = 0;
                // reset all toppings
            pepperoni = "";
            sausage = "";
            bacon = "";
            ham = "";
            beef = "";
            gPep = "";
            rPep = "";
            onion = "";
            bOliv = "";
            chicken = "";
            jalapeno = "";
            mush = "";
            pineapple = "";
            stuffed = "";
            xCheese = "";
                // disables all cb boxes
            cbPepperoni.setEnabled(false);
            cbSausage.setEnabled(false);
            cbBacon.setEnabled(false);
            cbHam.setEnabled(false);
            cbBeef.setEnabled(false);
            cbGPep.setEnabled(false);
            cbRPep.setEnabled(false);
            cbOnion.setEnabled(false);
            cbBOliv.setEnabled(false);
            cbChicken.setEnabled(false);
            cbJalapeno.setEnabled(false);
            cbMush.setEnabled(false);
            cbPineapple.setEnabled(false);
            cbStuffed.setEnabled(false);
            cbXCheese.setEnabled(false);
                // selects corresponding toppings
            cbPepperoni.setSelected(false);
            cbSausage.setSelected(false);
            cbBacon.setSelected(true);      //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                bacon = "\nBacon Crumble:\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbHam.setSelected(true);        //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                ham = "\nHam:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbBeef.setSelected(false);
            cbGPep.setSelected(false);
            cbRPep.setSelected(false);
            cbOnion.setSelected(false);
            cbBOliv.setSelected(false);
            cbChicken.setSelected(false);
            cbJalapeno.setSelected(false);
            cbMush.setSelected(false);
            cbPineapple.setSelected(true);  //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                pineapple = "\nPineapple:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                pineapple = "\nPineapple:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                pineapple = "\nPineapple:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                pineapple = "\nPineapple:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                pineapple = "\nPineapple:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbStuffed.setSelected(false);
            cbXCheese.setSelected(true);    //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            
            // calc subtotal
            subtotal = costPizza + tTop;

            // output receipt
            receipt = sPizza + 
                    pepperoni + sausage + bacon + ham + beef + 
                    gPep + rPep + onion + bOliv + chicken + 
                    jalapeno + mush + pineapple + stuffed + xCheese + 

                    "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                    "\nSubtotal:\t\t" + mf.format(subtotal);

            txtADisplay.setText(receipt);
            
        } else if(cboPresets.getSelectedItem() == "Canadian") {
                // resets toppings cost
            tTop = 0;
                // reset all toppings
            pepperoni = "";
            sausage = "";
            bacon = "";
            ham = "";
            beef = "";
            gPep = "";
            rPep = "";
            onion = "";
            bOliv = "";
            chicken = "";
            jalapeno = "";
            mush = "";
            pineapple = "";
            stuffed = "";
            xCheese = "";
                // disables all cb boxes
            cbPepperoni.setEnabled(false);
            cbSausage.setEnabled(false);
            cbBacon.setEnabled(false);
            cbHam.setEnabled(false);
            cbBeef.setEnabled(false);
            cbGPep.setEnabled(false);
            cbRPep.setEnabled(false);
            cbOnion.setEnabled(false);
            cbBOliv.setEnabled(false);
            cbChicken.setEnabled(false);
            cbJalapeno.setEnabled(false);
            cbMush.setEnabled(false);
            cbPineapple.setEnabled(false);
            cbStuffed.setEnabled(false);
            cbXCheese.setEnabled(false);
                // selects corresponding toppings
            cbPepperoni.setSelected(true);  //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                pepperoni = "\nPepperoni:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbSausage.setSelected(false);
            cbBacon.setSelected(true);      //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                bacon = "\nBacon Crumble:\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbHam.setSelected(false);
            cbBeef.setSelected(false);
            cbGPep.setSelected(true);       //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                gPep = "\nGreen Peppers:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbRPep.setSelected(true);       //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                rPep = "\nRed Peppers:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                rPep = "\nRed Peppers:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                rPep = "\nRed Peppers:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                rPep = "\nRed Peppers:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                rPep = "\nRed Peppers:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbOnion.setSelected(false);
            cbBOliv.setSelected(false);
            cbChicken.setSelected(false);
            cbJalapeno.setSelected(false);
            cbMush.setSelected(true);       //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                mush = "\nMushrooms:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbPineapple.setSelected(false);
            cbStuffed.setSelected(false);
            cbXCheese.setSelected(true);    //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            
            // calc subtotal
            subtotal = costPizza + tTop;

            // output receipt
            receipt = sPizza + 
                    pepperoni + sausage + bacon + ham + beef + 
                    gPep + rPep + onion + bOliv + chicken + 
                    jalapeno + mush + pineapple + stuffed + xCheese + 

                    "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                    "\nSubtotal:\t\t" + mf.format(subtotal);

            txtADisplay.setText(receipt);
            
        } else if(cboPresets.getSelectedItem() == "Meat Lover's") {
                // resets toppings cost
            tTop = 0;
                // reset all toppings
            pepperoni = "";
            sausage = "";
            bacon = "";
            ham = "";
            beef = "";
            gPep = "";
            rPep = "";
            onion = "";
            bOliv = "";
            chicken = "";
            jalapeno = "";
            mush = "";
            pineapple = "";
            stuffed = "";
            xCheese = "";
                // disables all cb boxes
            cbPepperoni.setEnabled(false);
            cbSausage.setEnabled(false);
            cbBacon.setEnabled(false);
            cbHam.setEnabled(false);
            cbBeef.setEnabled(false);
            cbGPep.setEnabled(false);
            cbRPep.setEnabled(false);
            cbOnion.setEnabled(false);
            cbBOliv.setEnabled(false);
            cbChicken.setEnabled(false);
            cbJalapeno.setEnabled(false);
            cbMush.setEnabled(false);
            cbPineapple.setEnabled(false);
            cbStuffed.setEnabled(false);
            cbXCheese.setEnabled(false);
                // selects corresponding toppings
            cbPepperoni.setSelected(true);  //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                pepperoni = "\nPepperoni:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbSausage.setSelected(true);    //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                sausage = "\nItalian Sausage:\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbBacon.setSelected(true);      //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                bacon = "\nBacon Crumble:\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                bacon = "\nBacon Crumble:\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbHam.setSelected(true);        //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                ham = "\nHam:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbBeef.setSelected(true);       //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                beef = "\nGround Beef:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbGPep.setSelected(false);
            cbRPep.setSelected(false);
            cbOnion.setSelected(false);
            cbBOliv.setSelected(false);
            cbChicken.setSelected(false);
            cbJalapeno.setSelected(false);
            cbMush.setSelected(false);
            cbPineapple.setSelected(false);
            cbStuffed.setSelected(false);
            cbXCheese.setSelected(true);    //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            
            // calc subtotal
            subtotal = costPizza + tTop;

            // output receipt
            receipt = sPizza + 
                    pepperoni + sausage + bacon + ham + beef + 
                    gPep + rPep + onion + bOliv + chicken + 
                    jalapeno + mush + pineapple + stuffed + xCheese + 

                    "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                    "\nSubtotal:\t\t" + mf.format(subtotal);

            txtADisplay.setText(receipt);
            
        } else if(cboPresets.getSelectedItem() == "Super Supreme") {
                // resets toppings cost
            tTop = 0;
                // reset all toppings
            pepperoni = "";
            sausage = "";
            bacon = "";
            ham = "";
            beef = "";
            gPep = "";
            rPep = "";
            onion = "";
            bOliv = "";
            chicken = "";
            jalapeno = "";
            mush = "";
            pineapple = "";
            stuffed = "";
            xCheese = "";
                // disables all cb boxes
            cbPepperoni.setEnabled(false);
            cbSausage.setEnabled(false);
            cbBacon.setEnabled(false);
            cbHam.setEnabled(false);
            cbBeef.setEnabled(false);
            cbGPep.setEnabled(false);
            cbRPep.setEnabled(false);
            cbOnion.setEnabled(false);
            cbBOliv.setEnabled(false);
            cbChicken.setEnabled(false);
            cbJalapeno.setEnabled(false);
            cbMush.setEnabled(false);
            cbPineapple.setEnabled(false);
            cbStuffed.setEnabled(false);
            cbXCheese.setEnabled(false);
                // selects corresponding toppings
            cbPepperoni.setSelected(true);  //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                pepperoni = "\nPepperoni:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbSausage.setSelected(true);    //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                sausage = "\nItalian Sausage:\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbBacon.setSelected(false);
            cbHam.setSelected(true);        //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                ham = "\nHam:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbBeef.setSelected(true);       //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                beef = "\nGround Beef:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbGPep.setSelected(true);       //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                gPep = "\nGreen Peppers:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbRPep.setSelected(false);
            cbOnion.setSelected(true);      //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                onion = "\nOnions:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbBOliv.setSelected(true);      //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                bOliv = "\nBlack Olives:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbChicken.setSelected(false);
            cbJalapeno.setSelected(false);
            cbMush.setSelected(true);       //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                mush = "\nMushrooms:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbPineapple.setSelected(false);
            cbStuffed.setSelected(false);
            cbXCheese.setSelected(false);
            
            // output receipt
            receipt = sPizza + 
                    pepperoni + sausage + bacon + ham + beef + 
                    gPep + rPep + onion + bOliv + chicken + 
                    jalapeno + mush + pineapple + stuffed + xCheese + 

                    "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                    "\nSubtotal:\t\t" + mf.format(subtotal);

            txtADisplay.setText(receipt);
            
        } else if(cboPresets.getSelectedItem() == "Random") {
                // resets toppings cost
            tTop = 0;
                // reset all toppings
            pepperoni = "";
            sausage = "";
            bacon = "";
            ham = "";
            beef = "";
            gPep = "";
            rPep = "";
            onion = "";
            bOliv = "";
            chicken = "";
            jalapeno = "";
            mush = "";
            pineapple = "";
            stuffed = "";
            xCheese = "";
                // disables all cb boxes
            cbPepperoni.setEnabled(false);
            cbSausage.setEnabled(false);
            cbBacon.setEnabled(false);
            cbHam.setEnabled(false);
            cbBeef.setEnabled(false);
            cbGPep.setEnabled(false);
            cbRPep.setEnabled(false);
            cbOnion.setEnabled(false);
            cbBOliv.setEnabled(false);
            cbChicken.setEnabled(false);
            cbJalapeno.setEnabled(false);
            cbMush.setEnabled(false);
            cbPineapple.setEnabled(false);
            cbStuffed.setEnabled(false);
            cbXCheese.setEnabled(false);
                // selects toppings based on 50% chance rnd #
            if(r.nextInt(2) + 1 == 1) {
                cbPepperoni.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    pepperoni = "\nPepperoni:\t\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    pepperoni = "\nPepperoni:\t\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    pepperoni = "\nPepperoni:\t\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    pepperoni = "\nPepperoni:\t\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    pepperoni = "\nPepperoni:\t\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbPepperoni.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbSausage.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    sausage = "\nItalian Sausage:\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    sausage = "\nItalian Sausage:\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    sausage = "\nItalian Sausage:\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    sausage = "\nItalian Sausage:\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    sausage = "\nItalian Sausage:\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbSausage.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbBacon.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    bacon = "\nBacon Crumble:\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    bacon = "\nBacon Crumble:\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    bacon = "\nBacon Crumble:\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    bacon = "\nBacon Crumble:\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    bacon = "\nBacon Crumble:\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbBacon.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbHam.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    ham = "\nHam:\t\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    ham = "\nHam:\t\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    ham = "\nHam:\t\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    ham = "\nHam:\t\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    ham = "\nHam:\t\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbHam.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbBeef.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    beef = "\nGround Beef:\t\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    beef = "\nGround Beef:\t\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    beef = "\nGround Beef:\t\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    beef = "\nGround Beef:\t\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    beef = "\nGround Beef:\t\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbBeef.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbGPep.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    gPep = "\nGreen Peppers:\t\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    gPep = "\nGreen Peppers:\t\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    gPep = "\nGreen Peppers:\t\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    gPep = "\nGreen Peppers:\t\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    gPep = "\nGreen Peppers:\t\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbGPep.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbRPep.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    rPep = "\nRed Peppers:\t\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    rPep = "\nRed Peppers:\t\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    rPep = "\nRed Peppers:\t\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    rPep = "\nRed Peppers:\t\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    rPep = "\nRed Peppers:\t\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbRPep.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbOnion.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    onion = "\nOnions:\t\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    onion = "\nOnions:\t\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    onion = "\nOnions:\t\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    onion = "\nOnions:\t\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    onion = "\nOnions:\t\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbOnion.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbBOliv.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    bOliv = "\nBlack Olives:\t\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    bOliv = "\nBlack Olives:\t\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    bOliv = "\nBlack Olives:\t\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    bOliv = "\nBlack Olives:\t\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    bOliv = "\nBlack Olives:\t\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbBOliv.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbChicken.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    chicken = "\nChicken:\t\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    chicken = "\nChicken:\t\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    chicken = "\nChicken:\t\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    chicken = "\nChicken:\t\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    chicken = "\nChicken:\t\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbChicken.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbJalapeno.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    jalapeno = "\nJalapeño Peppers:\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    jalapeno = "\nJalapeño Peppers:\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    jalapeno = "\nJalapeño Peppers:\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    jalapeno = "\nJalapeño Peppers:\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    jalapeno = "\nJalapeño Peppers:\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbJalapeno.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbMush.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    mush = "\nMushrooms:\t\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    mush = "\nMushrooms:\t\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    mush = "\nMushrooms:\t\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    mush = "\nMushrooms:\t\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    mush = "\nMushrooms:\t\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbMush.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbPineapple.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    pineapple = "\nPineapple:\t\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    pineapple = "\nPineapple:\t\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    pineapple = "\nPineapple:\t\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    pineapple = "\nPineapple:\t\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    pineapple = "\nPineapple:\t\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbPineapple.setSelected(false);
            } //endif
            // checks if pizza size is L or XL
            if(rdoLarge.isSelected() == true || rdoXLarge.isSelected() == true) {
                // 50% chance to be selected
                if(r.nextInt(2) + 1 == 1) {
                    cbStuffed.setSelected(true);
                    // set respective string & accumulate total toppings cost
                    if(rdoLarge.isSelected() == true) {
                        stuffed = "\nStuffed Crust:\t\t" + mf.format(3);
                        tTop += 3;
                    } else {
                        stuffed = "\nStuffed Crust:\t\t" + mf.format(3);
                        tTop += 3;
                    } //endif
                } else {
                    cbStuffed.setSelected(false);
                }//endif
            } else {
                cbStuffed.setSelected(false);
            } //endif
            if(r.nextInt(2) + 1 == 1) {
                cbXCheese.setSelected(true);
                // set respective string & accumulate total toppings cost
                if(rdoPers.isSelected() == true) {
                    xCheese = "\nExtra Cheese:\t\t" + mf.format(pTop);
                    tTop += pTop;
                } else if(rdoSmall.isSelected() == true) {
                    xCheese = "\nExtra Cheese:\t\t" + mf.format(sTop);
                    tTop += sTop;
                } else if(rdoMed.isSelected() == true) {
                    xCheese = "\nExtra Cheese:\t\t" + mf.format(mTop);
                    tTop += mTop;
                } else if(rdoLarge.isSelected() == true) {
                    xCheese = "\nExtra Cheese:\t\t" + mf.format(lTop);
                    tTop += lTop;
                } else {
                    xCheese = "\nExtra Cheese:\t\t" + mf.format(xlTop);
                    tTop += xlTop;
                } //endif
            } else {
                cbXCheese.setSelected(false);
            } //endif
            
            // calc subtotal
            subtotal = costPizza + tTop;

            // output receipt
            receipt = sPizza + 
                    pepperoni + sausage + bacon + ham + beef + 
                    gPep + rPep + onion + bOliv + chicken + 
                    jalapeno + mush + pineapple + stuffed + xCheese + 

                    "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                    "\nSubtotal:\t\t" + mf.format(subtotal);

            txtADisplay.setText(receipt);
            
        } else { // deluxe
                // resets toppings cost
            tTop = 0;
                // reset all toppings
            pepperoni = "";
            sausage = "";
            bacon = "";
            ham = "";
            beef = "";
            gPep = "";
            rPep = "";
            onion = "";
            bOliv = "";
            chicken = "";
            jalapeno = "";
            mush = "";
            pineapple = "";
            stuffed = "";
            xCheese = "";
                // disables all cb boxes
            cbPepperoni.setEnabled(false);
            cbSausage.setEnabled(false);
            cbBacon.setEnabled(false);
            cbHam.setEnabled(false);
            cbBeef.setEnabled(false);
            cbGPep.setEnabled(false);
            cbRPep.setEnabled(false);
            cbOnion.setEnabled(false);
            cbBOliv.setEnabled(false);
            cbChicken.setEnabled(false);
            cbJalapeno.setEnabled(false);
            cbMush.setEnabled(false);
            cbPineapple.setEnabled(false);
            cbStuffed.setEnabled(false);
            cbXCheese.setEnabled(false);
                // selects corresponding toppings
            cbPepperoni.setSelected(true);  //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                pepperoni = "\nPepperoni:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                pepperoni = "\nPepperoni:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbSausage.setSelected(true);    //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                sausage = "\nItalian Sausage:\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                sausage = "\nItalian Sausage:\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbBacon.setSelected(false);
            cbHam.setSelected(true);        //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                ham = "\nHam:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                ham = "\nHam:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbBeef.setSelected(true);       //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                beef = "\nGround Beef:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                beef = "\nGround Beef:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbGPep.setSelected(true);       //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                gPep = "\nGreen Peppers:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                gPep = "\nGreen Peppers:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbRPep.setSelected(false);
            cbOnion.setSelected(true);      //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                onion = "\nOnions:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                onion = "\nOnions:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbBOliv.setSelected(true);      //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                bOliv = "\nBlack Olives:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                bOliv = "\nBlack Olives:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbChicken.setSelected(false);
            cbJalapeno.setSelected(false);
            cbMush.setSelected(true);       //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                mush = "\nMushrooms:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                mush = "\nMushrooms:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            cbPineapple.setSelected(false);
            cbStuffed.setSelected(false);
            cbXCheese.setSelected(true);    //
            // set respective string & accumulate total toppings cost
            if(rdoPers.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(pTop);
                tTop += pTop;
            } else if(rdoSmall.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(sTop);
                tTop += sTop;
            } else if(rdoMed.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(mTop);
                tTop += mTop;
            } else if(rdoLarge.isSelected() == true) {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(lTop);
                tTop += lTop;
            } else {
                xCheese = "\nExtra Cheese:\t\t" + mf.format(xlTop);
                tTop += xlTop;
            } //endif
            
            // calc subtotal
            subtotal = costPizza + tTop;

            // output receipt
            receipt = sPizza + 
                    pepperoni + sausage + bacon + ham + beef + 
                    gPep + rPep + onion + bOliv + chicken + 
                    jalapeno + mush + pineapple + stuffed + xCheese + 

                    "\n----------------------------------------------------\nTotal Toppings Cost:\t" + mf.format(tTop) + 
                    "\nSubtotal:\t\t" + mf.format(subtotal);

            txtADisplay.setText(receipt);
            
        } // end if
    }//GEN-LAST:event_cboPresetsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(framePizzaAss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(framePizzaAss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(framePizzaAss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(framePizzaAss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new framePizzaAss().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCash;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnCredit;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup btnGrSize;
    private javax.swing.JButton btnReset;
    private javax.swing.JCheckBox cbBOliv;
    private javax.swing.JCheckBox cbBacon;
    private javax.swing.JCheckBox cbBeef;
    private javax.swing.JCheckBox cbChicken;
    private javax.swing.JCheckBox cbGPep;
    private javax.swing.JCheckBox cbHam;
    private javax.swing.JCheckBox cbJalapeno;
    private javax.swing.JCheckBox cbMush;
    private javax.swing.JCheckBox cbOnion;
    private javax.swing.JCheckBox cbPepperoni;
    private javax.swing.JCheckBox cbPineapple;
    private javax.swing.JCheckBox cbRPep;
    private javax.swing.JCheckBox cbSausage;
    private javax.swing.JCheckBox cbStuffed;
    private javax.swing.JCheckBox cbXCheese;
    private javax.swing.JComboBox cboPresets;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lblDebit;
    private javax.swing.JLabel lblNumPad;
    private javax.swing.JLabel lblPayMeth;
    private javax.swing.JLabel lblPic1;
    private javax.swing.JLabel lblSize;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblToppings;
    private javax.swing.JRadioButton rdoLarge;
    private javax.swing.JRadioButton rdoMed;
    private javax.swing.JRadioButton rdoPers;
    private javax.swing.JRadioButton rdoSmall;
    private javax.swing.JRadioButton rdoXLarge;
    private javax.swing.JTextArea txtADisplay;
    // End of variables declaration//GEN-END:variables
}
